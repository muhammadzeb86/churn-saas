name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infra/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'infra/**'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: retainwise-backend
  ECS_CLUSTER: retainwise-cluster
  ECS_SERVICE: retainwise-service
  ECS_TASK_DEFINITION: retainwise-backend

jobs:
  # Job 1: Build and Test Backend
  build-and-test:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run backend tests (if any)
      run: |
        cd backend
        # Add your test commands here when you have tests
        echo "No tests configured yet - skipping test step"
        
    - name: Build Docker image
      run: |
        cd backend
        docker build -t $ECR_REPOSITORY:${{ github.sha }} .
        docker build -t $ECR_REPOSITORY:latest .
        
  # Job 2: Deploy to AWS (only on main branch)
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Check for infrastructure changes
      id: check-infra
      run: |
        # Check if any files in infra/ directory were modified
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^infra/"; then
          echo "infra_changed=true" >> $GITHUB_OUTPUT
        else
          echo "infra_changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Setup Terraform
      if: steps.check-infra.outputs.infra_changed == 'true'
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.5.0"
        
    - name: Terraform Init
      if: steps.check-infra.outputs.infra_changed == 'true'
      run: |
        cd infra
        terraform init
        
    - name: Terraform Plan
      if: steps.check-infra.outputs.infra_changed == 'true'
      run: |
        cd infra
        terraform plan -out=tfplan
        
    - name: Terraform Apply
      if: steps.check-infra.outputs.infra_changed == 'true'
      run: |
        cd infra
        terraform apply -auto-approve tfplan
        
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION \
        --query taskDefinition > task-definition.json
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: retainwise-backend
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Get service status
      run: |
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
          --output table
          
    - name: Check for database migration changes
      id: check-migrations
      run: |
        # Check if any migration files were modified
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/alembic/"; then
          echo "migrations_changed=true" >> $GITHUB_OUTPUT
        else
          echo "migrations_changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Run database migrations
      if: steps.check-migrations.outputs.migrations_changed == 'true'
      run: |
        # Get subnet and security group IDs from the service
        SUBNET_IDS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].networkConfiguration.awsvpcConfiguration.subnets[]' --output text | tr '\t' ',')
        SECURITY_GROUP_IDS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].networkConfiguration.awsvpcConfiguration.securityGroups[]' --output text | tr '\t' ',')
        
        echo "Running database migrations..."
        
        # Create a one-off migration task
        MIGRATION_TASK_ARN=$(aws ecs run-task \
          --cluster $ECS_CLUSTER \
          --task-definition $ECS_TASK_DEFINITION \
          --launch-type FARGATE \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_IDS],assignPublicIp=ENABLED}" \
          --overrides '{"containerOverrides":[{"name":"retainwise-backend","command":["python","backend/scripts/run_migrations.py"]}]}' \
          --region $AWS_REGION \
          --query 'tasks[0].taskArn' \
          --output text)
        
        echo "Migration task started: $MIGRATION_TASK_ARN"
        
        # Wait for migration task to complete
        echo "Waiting for migration task to complete..."
        while true; do
          TASK_STATUS=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $MIGRATION_TASK_ARN \
            --query 'tasks[0].lastStatus' \
            --output text \
            --region $AWS_REGION)
          
          echo "Migration task status: $TASK_STATUS"
          
          if [ "$TASK_STATUS" = "STOPPED" ]; then
            # Check if task succeeded
            TASK_EXIT_CODE=$(aws ecs describe-tasks \
              --cluster $ECS_CLUSTER \
              --tasks $MIGRATION_TASK_ARN \
              --query 'tasks[0].containers[0].exitCode' \
              --output text \
              --region $AWS_REGION)
            
            if [ "$TASK_EXIT_CODE" = "0" ]; then
              echo "Migration completed successfully!"
              break
            else
              echo "Migration failed with exit code: $TASK_EXIT_CODE"
              exit 1
            fi
          elif [ "$TASK_STATUS" = "RUNNING" ]; then
            echo "Migration still running, waiting..."
            sleep 10
          else
            echo "Unexpected task status: $TASK_STATUS"
            exit 1
          fi
        done
        
    - name: Verify migration success
      if: steps.check-migrations.outputs.migrations_changed == 'true'
      run: |
        echo "Migration verification completed successfully!"
        echo "Database schema is now up to date."
        
    - name: Get load balancer URL
      run: |
        # Get the load balancer DNS name from Terraform outputs or AWS CLI
        if [ -f "infra/terraform.tfstate" ]; then
          echo "Load Balancer URL: $(cd infra && terraform output -raw load_balancer_dns)"
        else
          echo "Load Balancer URL: Check AWS Console for ALB DNS name"
        fi

  # Job 3: Health Check (optional)
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Wait for application to be ready
      run: |
        # Wait a bit for the application to fully start
        sleep 60
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Get load balancer URL and test health endpoint
      run: |
        # Get ALB DNS name from AWS CLI
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --query 'LoadBalancers[?contains(LoadBalancerName, `retainwise`)].DNSName' \
          --output text)
        
        if [ ! -z "$ALB_DNS" ]; then
          echo "Testing health endpoint at: http://$ALB_DNS/health"
          curl -f http://$ALB_DNS/health || echo "Health check failed"
        else
          echo "Could not find load balancer DNS name"
        fi 