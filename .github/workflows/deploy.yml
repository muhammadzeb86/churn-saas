name: Deploy Backend to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: retainwise-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run database migrations
        run: |
          # Get subnet and security group IDs from the service
          SUBNET_IDS="${{ secrets.SUBNET_ID_1 }},${{ secrets.SUBNET_ID_2 }}"
          SECURITY_GROUP_IDS="${{ secrets.SECURITY_GROUP_ID }}"
          
          echo "Running database migrations..."
          
          # Create a one-off migration task
          MIGRATION_TASK_ARN=$(aws ecs run-task \
            --cluster retainwise-cluster \
            --task-definition retainwise-backend \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_IDS],assignPublicIp=ENABLED}" \
            --overrides '{"containerOverrides":[{"name":"retainwise-backend","command":["python","backend/scripts/run_migrations.py"]}]}' \
            --region us-east-1 \
            --query 'tasks[0].taskArn' \
            --output text)
          
          echo "Migration task started: $MIGRATION_TASK_ARN"
          
          # Wait for migration task to complete
          echo "Waiting for migration task to complete..."
          while true; do
            TASK_STATUS=$(aws ecs describe-tasks \
              --cluster retainwise-cluster \
              --tasks $MIGRATION_TASK_ARN \
              --query 'tasks[0].lastStatus' \
              --output text \
              --region us-east-1)
            
            echo "Migration task status: $TASK_STATUS"
            
            if [ "$TASK_STATUS" = "STOPPED" ]; then
              # Check if task succeeded
              TASK_EXIT_CODE=$(aws ecs describe-tasks \
                --cluster retainwise-cluster \
                --tasks $MIGRATION_TASK_ARN \
                --query 'tasks[0].containers[0].exitCode' \
                --output text \
                --region us-east-1)
              
              if [ "$TASK_EXIT_CODE" = "0" ]; then
                echo "Migration completed successfully!"
                break
              else
                echo "Migration failed with exit code: $TASK_EXIT_CODE"
                exit 1
              fi
            elif [ "$TASK_STATUS" = "RUNNING" ]; then
              echo "Migration still running, waiting..."
              sleep 10
            else
              echo "Unexpected task status: $TASK_STATUS"
              exit 1
            fi
          done
            
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster retainwise-cluster \
            --service retainwise-service \
            --task-definition retainwise-backend \
            --force-new-deployment 